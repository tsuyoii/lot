{"version":3,"file":"static/js/849.3153c555.chunk.js","mappings":"qNAQOA,EAAUC,EAAAA,EAAAA,OACVC,EAAYC,EAAAA,EAAAA,SACbC,EAAa,CAAC,gBACPC,EAA6B,SAACC,GAAW,IAAD,MAC3CC,EAAK,UAAGD,EAAME,YAAT,aAAG,EAAYC,SAC1B,GAA2BC,EAAAA,EAAAA,UAASN,EAAW,IAA/C,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAiCF,EAAAA,EAAAA,WAAS,UAAAH,EAAMM,cAAN,eAAcC,gBAAiB,IAAzE,eAAOA,EAAP,KAAqBC,EAArB,KACA,GAAqCL,EAAAA,EAAAA,WAAS,UAAAH,EAAMM,cAAN,eAAcG,kBAAmB,IAA/E,eAAOA,EAAP,KAAuBC,EAAvB,MAEAC,EAAAA,EAAAA,YAAU,WACN,GAAGZ,EAAM,CAAC,IAAD,MACCC,EAAK,UAAGD,EAAME,YAAT,aAAG,EAAYC,SAC1BM,EAAQ,UAACR,EAAMM,cAAP,aAAC,EAAcC,eACvBG,EAAU,UAACV,EAAMM,cAAP,aAAC,EAAcG,oBAE/B,CAACV,EAAMa,UACTD,EAAAA,EAAAA,YAAU,WAAK,IAAD,EACV,UAAAZ,EAAME,YAAN,SAAYY,KAAK,SAAU,CACvBJ,gBAAAA,EACAF,cAAAA,IAEJO,QAAQC,IAAIhB,EAAME,KAAKC,SAASI,OAAO,UACzC,CAACP,EAAMa,OAAOH,EAAgBF,IAahC,OACI,UAAC,IAAD,CAAOS,UAAU,WAAjB,WACI,SAAC,IAAD,sBAGA,SAAC,IAAD,WACI,SAAC,IAAD,CAAQC,aAAcb,EAAQc,SAjBf,SAACC,GACxBd,EAAUc,IAgB0DC,MAAO,CAACC,MAAM,QAA1E,SACSxB,EAAWyB,KAAI,SAAAC,GAAI,OAChB,SAAC9B,EAAD,UAAoB8B,GAAPA,WAI7B,SAAC,IAAD,8BAGA,SAAC,IAAD,WACI,SAAC,IAAD,CAAOC,YAAY,iCAAiCL,MAAOZ,EAAeW,SAxB5D,SAACO,GACvBjB,EAASiB,EAAEC,OAAOP,aAyBd,SAAC,IAAD,gCAGA,SAAC,IAAD,WACI,SAACxB,EAAD,CAAU6B,YAAY,2BAA2BG,YAAU,EAACR,MAAOV,EAAiBS,SA3BpE,SAACO,GACzBf,EAAWe,EAAEC,OAAOP","sources":["nodeComponents/output/mqttComponent.tsx"],"sourcesContent":["import { Col, Input, Row, Select, Space } from \"antd\";\nimport React, { useEffect, useState } from \"react\"\n\ninterface Params {\n    builder: string;\n    cell?:any ;\n    cellId?:string;\n}\nconst {Option} = Select\nconst {TextArea} = Input\nconst BrokerData = ['Local Broker']\nexport const FakeData: React.FC<Params> = (props) => {\n    const cells = props.cell?.toJSON()\n    const [broker,setBroker] = useState(BrokerData[0])\n    const [topicTemplate,setTopic] = useState(cells.config?.topicTemplate || '')\n    const [messageTemplate,setMessage] = useState(cells.config?.messageTemplate || '')\n\n    useEffect(()=>{\n        if(props){\n            const cells = props.cell?.toJSON()\n            setTopic(cells.config?.topicTemplate)\n            setMessage(cells.config?.messageTemplate)\n        }    \n    },[props.cellId])\n    useEffect(()=>{\n        props.cell?.prop('config', {\n            messageTemplate,\n            topicTemplate\n        })\n        console.log(props.cell.toJSON().config,'2333')\n    },[props.cellId,messageTemplate,topicTemplate])\n\n    const handleBrokerChange = (value: string) => {\n        setBroker(value)\n    }\n    const onMqttTopicChange = (e: React.FocusEvent<HTMLInputElement>)=>{\n        setTopic(e.target.value)\n    }\n    const onMqttMessageChange = (e:React.FocusEvent<HTMLTextAreaElement>)=>{\n        setMessage(e.target.value)\n    }\n\n\n    return (\n        <Space direction=\"vertical\">\n            <Row>\n                Broker\n            </Row>\n            <Row>\n                <Select defaultValue={broker} onChange={handleBrokerChange} style={{width:'100%'}}>\n                        {BrokerData.map(type => (\n                            <Option key={type}>{type}</Option>\n                        ))}\n                </Select>\n            </Row>\n            <Row>\n                Topic Template\n            </Row>\n            <Row>\n                <Input placeholder=\"e.g.my-topic or {{data.topic}}\" value={topicTemplate} onChange={onMqttTopicChange}/>\n            </Row>\n            <Row>\n                Message Template\n            </Row>\n            <Row>\n                <TextArea placeholder=\"textarea with clear icon\" allowClear value={messageTemplate} onChange={onMqttMessageChange} />\n            </Row>\n        </Space>\n    );\n};"],"names":["Option","Select","TextArea","Input","BrokerData","FakeData","props","cells","cell","toJSON","useState","broker","setBroker","config","topicTemplate","setTopic","messageTemplate","setMessage","useEffect","cellId","prop","console","log","direction","defaultValue","onChange","value","style","width","map","type","placeholder","e","target","allowClear"],"sourceRoot":""}