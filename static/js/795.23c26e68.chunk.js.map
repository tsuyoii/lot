{"version":3,"file":"static/js/795.23c26e68.chunk.js","mappings":"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","sources":["nodeComponents/triggers/serialComponent.tsx"],"sourcesContent":["import { Card, Col, Divider, Input, Modal, Radio, Row, Select, Space, Typography } from \"antd\";\nimport React, { useEffect, useState } from \"react\"\nimport { useDebounce } from \"../../utils/utils\";\nimport { ExpandOutlined, PlusOutlined } from '@ant-design/icons';\n\ninterface Params {\n    builder: string;\n    cell?:any ;\n    cellId?:string;\n}\nconst {Option} = Select\nconst ParityData = ['none','even','mark','odd','space']\nconst BaudRateData = ['110','300','600','1200']\nconst ParseData = ['byteLength','delimiter']\nconst DataBitsData = [5,6,7,8]\nconst WOnEncodData = ['ascii','utf8','utf16le','base64','binary','hex']\nexport const FakeData: React.FC<Params> = (props) => {\n    const cells = props.cell?.toJSON()\n    const [path, setPath] = useState(cells.config?.path||'')\n    const [items, setItems] = useState(BaudRateData);\n    const [name,setName] = useState('')\n    const [baudRate, setBaudRate] = useState(cells.config?.baudRate ||'');\n    const [parity, setParity] = useState(cells.config?.parity || ParityData[1]);\n    const [dataBits,setDataBits] = useState(cells.config?.dataBits || DataBitsData[0])\n    const [stopBits,setStopBits] = useState(cells.config?.stopBits || 1)\n    const [rtscts, setRtscts] = useState(cells.config?.rtscts ||true);\n    const [writeOnOpen, setWriteOnOpen] = useState(cells.config?.writeOnOpen||'');\n    const [writeOnOpenEncoding, setWriteOnOpenEncoding] = useState(cells.config?.writeOnOpenEncoding || '')\n    const [parseBy, setParse] = useState(cells.meta?.parseBy || ParseData[0]);\n    const [delimiter, setDelimiter] = useState(cells.config?.delimiter||'');\n    const [delimiterEncoding, setDelimiterEncoding] = useState(cells.config?.delimiterEncoding || WOnEncodData[0]);\n    const [byteLength, setByteLength] = useState<string | number>(cells.config?.byteLength || '');\n    const [encoding, setEncoding] = useState(cells.config?.encoding || WOnEncodData[0]);\n    const [count, setCount] = useState(0);\n  \n    useEffect(()=>{\n        if(props){\n            const cells = props.cell?.toJSON()\n            setPath(cells.config?.path)\n            if(!items.includes(cells.config?.baudRate+'')){\n                setItems([...items, cells.config?.baudRate?.toString()]);\n            }\n            setBaudRate(cells.config?.baudRate)\n            setParity(cells.config?.parity)\n            setDataBits(cells.config?.dataBits)\n            setStopBits(cells.config?.stopBits)\n            setRtscts(cells.config?.rtscts)\n            setWriteOnOpen(cells.config?.writeOnOpen)\n            setWriteOnOpenEncoding(cells.config?.writeOnOpenEncoding)\n            setParse(cells.meta?.parseBy)\n            setDelimiter(cells.config?.delimiter)\n            if(parseBy==='delimiter'){\n                setDelimiterEncoding(cells.config?.delimiterEncoding)\n                setByteLength('')\n            }else{\n                setByteLength(cells.config?.byteLength)\n                setDelimiterEncoding('')\n            }\n            setEncoding(cells.config?.encoding)\n\n            // props.cell.prop放这里，当连续点击一个节点后又跳转到另一个节点时有百分之20的可能会导致config无法对应上\n            // props.cell?.prop('config', {\n            //     // path:cells.config?.path,\n            //     // baudRate:cells.config?.baudRate,\n            //     path,\n            //     baudRate,\n            //     parity,\n            //     dataBits,\n            //     stopBits,\n            //     rtscts,\n            //     writeOnOpen,\n            //     writeOnOpenEncoding,\n            //     parseBy,\n            //     delimiter,\n            //     delimiterEncoding,\n            //     byteLength,\n            //     encoding\n            // })   \n            // console.log(props.cell.toJSON().config,'2333')  \n            // console.log(path,baudRate,parity,dataBits,stopBits,rtscts,writeOnOpen,writeOnOpenEncoding,parseBy,delimiter,delimiterEncoding,byteLength,encoding)       \n        }    \n    },[props.cellId])\n\n    useEffect(()=>{\n        props.cell?.prop('config', {\n            path,\n            baudRate,\n            parity,\n            dataBits,\n            stopBits,\n            rtscts,\n            writeOnOpen,\n            writeOnOpenEncoding,\n            parseBy,\n            delimiter,\n            delimiterEncoding,\n            byteLength,\n            encoding\n        })\n    // },[props.cellId,count])\n    },[props.cellId,path,baudRate,parity,dataBits,stopBits,rtscts,writeOnOpen,writeOnOpenEncoding,parseBy,delimiter,delimiterEncoding,byteLength,encoding])\n    \n    const onBaudRateChange = (event: any) => {\n      setBaudRate(event);\n      setCount(count+1)\n    };\n  \n    const addItem = (e:any) => {\n      e.preventDefault();\n      setItems([...items, name]);\n      setName('');\n    };\n\n    const handleParityChange = (value:string)=>{\n        setParity(value)\n        setCount(count+1)\n    }\n    const onRtsctsChange = (e: any) => {\n        setRtscts(e.target.value);\n        setCount(count+1)\n    };\n    const handleParseChange = (value:string)=>{\n        setParse(value)\n        setCount(count+1)\n    }\n    \n\n\n    return (\n        <Space direction=\"vertical\">\n        <Divider plain>Configuration</Divider>\n            <Row>\n                Serial Path\n            </Row>\n            <Row>\n                <Input placeholder=\"e.g./dev/ROBOT\" value={path} onChange={(v)=>{\n                    setPath(v.target.value)\n                    setCount(count+1)\n                    }}/>\n            </Row>\n            <Row>\n                Baud Rate\n            </Row>\n            <Row>\n                <Select\n                    style={{ width: 200 }}\n                    placeholder=\"custom dropdown render\"\n                    value={baudRate}\n                    onChange={onBaudRateChange}\n                    dropdownRender={menu => (\n                        <>\n                        {menu}\n                        <Divider style={{ margin: '8px 0' }} />\n                        <Space align=\"center\" style={{ padding: '0 8px 4px' }}>\n                            <Input placeholder=\"Please enter item\" value={name}/>\n                            <Typography.Link onClick={addItem} style={{ whiteSpace: 'nowrap' }}>\n                            <PlusOutlined /> Add item\n                            </Typography.Link>\n                        </Space>\n                        </>\n                    )}\n                    >\n                    {items.map(item => (\n                        <Option key={item}>{item}</Option>\n                    ))}\n                </Select>\n            </Row>\n            <Row>\n                Parity\n            </Row>\n            <Row>\n                <Select defaultValue={ParityData[1]} value={parity} onChange={handleParityChange} style={{width:'100%'}}>\n                    {ParityData.map(type => (\n                        <Option key={type}>{type}</Option>\n                    ))}\n                </Select>\n            </Row>\n            <Row>\n                Data Bits\n            </Row>\n            <Row>\n                <Select defaultValue={DataBitsData[0]} value={dataBits}  onChange={(v)=>{\n                    setDataBits(v)\n                    setCount(count+1)\n                    }} style={{width:'100%'}}>\n                    {DataBitsData.map(type => (\n                        <Option key={type}>{type}</Option>\n                    ))}\n                </Select>\n            </Row>\n            <Row>\n                Stop Bits\n            </Row>\n            <Row>\n                <Select defaultValue={1} value={stopBits}  onChange={(v)=>{\n                    setStopBits(+v)\n                    setCount(count+1)\n                    }} style={{width:'100%'}}>\n                    <Option key={1}>1</Option>\n                    <Option key={2}>2</Option>\n                </Select>\n            </Row>\n            <Row>\n                RTS/CTS Handshake\n            </Row>\n            <Row>\n                <Radio.Group onChange={onRtsctsChange} value={rtscts}>\n                    <Radio value={true}>true</Radio>\n                    <Radio value={false}>false</Radio>\n                </Radio.Group>\n            </Row>\n            <Row>\n                Write After Port Opens\n            </Row>\n            <Row>\n                <Input placeholder=\"e.g.hello\\r\" value={writeOnOpen} onChange={(v)=>{\n                    setWriteOnOpen(v.target.value)\n                    setCount(count+1)\n                    }} />\n            </Row>\n            <Row>\n                Write On Open Encoding\n            </Row>\n            <Row>\n                <Select defaultValue={WOnEncodData[0]} value={writeOnOpenEncoding}  onChange={(v)=>{\n                    setWriteOnOpenEncoding(v)\n                    setCount(count+1)\n                    }}  style={{width:'100%'}}>\n                    {WOnEncodData.map(type => (\n                        <Option key={type}>{type}</Option>\n                    ))}\n                </Select>\n            </Row>\n            <Row>\n                Parse Method\n            </Row>\n            <Row>\n                <Select defaultValue={'byteLength'} value={parseBy} onChange={handleParseChange} style={{width:'100%'}}>\n                    <Option key={'byteLength'}>Byte Length</Option>\n                    <Option key={'delimiter'}>Delimiter</Option>\n                </Select>\n            </Row>\n            {\n                parseBy==='delimiter'?\n                <>\n                    <Row>\n                        Delimiter\n                    </Row>\n                    <Row>\n                        <Input placeholder=\"e.g.\\r\" value={delimiter} onChange={(v)=>{\n                            setDelimiter(v.target.value)\n                            setCount(count+1)\n                            }} />\n                    </Row>\n                    <Row>\n                        Delimiter Encoding\n                    </Row>\n                    <Row>\n                        <Select defaultValue={WOnEncodData[0]} value={delimiterEncoding} onChange={(v)=>{\n                    setDelimiterEncoding(v)\n                    setCount(count+1)\n                    }} style={{width:'100%'}}>\n                            {WOnEncodData.map(type => (\n                                <Option key={type}>{type}</Option>\n                            ))}\n                        </Select>\n                    </Row>\n                </>:\n                <>\n                    <Row>\n                        Byte Length\n                    </Row>\n                    <Row>\n                        <Input placeholder=\"e.g.8\" value={byteLength} onChange={(v)=>{\n                    setByteLength(v.target.value)\n                    setCount(count+1)\n                    }}/>\n                    </Row>\n                </>\n            }\n            <Row>\n                Output Encoding\n            </Row>\n            <Row>\n                <Select defaultValue={WOnEncodData[0]} value={encoding} onChange={(v)=>{\n                    setEncoding(v)\n                    setCount(count+1)\n                    }} style={{width:'100%'}}>\n                    {WOnEncodData.map(type => (\n                        <Option key={type}>{type}</Option>\n                    ))}\n                </Select>\n            </Row>\n        </Space>\n    );\n};"],"names":["Option","Select","ParityData","BaudRateData","ParseData","DataBitsData","WOnEncodData","FakeData","props","cells","cell","toJSON","useState","config","path","setPath","items","setItems","name","setName","baudRate","setBaudRate","parity","setParity","dataBits","setDataBits","stopBits","setStopBits","rtscts","setRtscts","writeOnOpen","setWriteOnOpen","writeOnOpenEncoding","setWriteOnOpenEncoding","meta","parseBy","setParse","delimiter","setDelimiter","delimiterEncoding","setDelimiterEncoding","byteLength","setByteLength","encoding","setEncoding","count","setCount","useEffect","includes","toString","cellId","prop","addItem","e","preventDefault","direction","plain","placeholder","value","onChange","v","target","style","width","event","dropdownRender","menu","margin","align","padding","onClick","whiteSpace","map","item","defaultValue","type"],"sourceRoot":""}